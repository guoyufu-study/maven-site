 ----
 Maven in 5 Minutes
 -----
 Eric Redmond
 -----
 2008-01-01
 -----

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html

Maven in 5 Minutes

* 预备知识（Prerequisites）

    你必须了解如何在你的计算机上安装软件。
    如果你不知道该怎么做，请询问你办公室、学校等的人，或者花钱请人给你解释一下。
    Maven邮件列表并不是寻求这一建议（ask for this advice）的最佳场所。

* 安装

    <Maven是一个Java工具，因此您必须安装 {{{https://www.oracle.com/technetwork/java/javase/downloads/index.html}Java}}
    才能继续。>

    首先，{{{../../download.html}下载Maven}} 并按照 {{{../../install.html}安装说明}} 进行安装。
    然后，在终端或命令提示符中输入以下内容:

-----
mvn --version
-----

    它应该会打印出你安装的Maven版本，例如:

-----
Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)
Maven home: D:\apache-maven-3.6.3\apache-maven\bin\..
Java version: 1.8.0_232, vendor: AdoptOpenJDK, runtime: C:\Program Files\AdoptOpenJDK\jdk-8.0.232.09-hotspot\jre
Default locale: en_US, platform encoding: Cp1250
OS name: "windows 10", version: "10.0", arch: "amd64", family: "windows"
-----

    根据您的网络设置，您可能需要额外的配置。如有必要，请参阅 {{{../mini/guide-configuring-maven.html}Maven配置指南}}。

 <<如果您正在使用Windows，您应该查看>> {{{./windows-prerequisites.html}Windows先决条件}}<<，以确保您已经准备好在Windows上使用Maven。>>

* 创建一个项目

    您需要有一个地方让您的项目驻留（reside），在某个地方创建一个目录并在该目录中启动shell。在命令行中，执行以下Maven目标:

-----
mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false
-----

  <If you have just installed Maven, it may take a while on the first run. This is because Maven is downloading
  the most recent artifacts (plugin jars and other files) into your local repository. You may also need to
  execute the command a couple of times before it succeeds. This is because the remote server may time out before
  your downloads are complete. 别担心，有办法解决的。>

    您将注意到，<generate> 目标创建了一个与 artifactId 相同名称的目录。切换到该目录。

-----
cd my-app
-----

    在此目录下，您将注意到以下{{{../introduction/introduction-to-the-standard-directory-layout.html}标准项目结构}}。

-----
my-app
|-- pom.xml
`-- src
    |-- main
    |   `-- java
    |       `-- com
    |           `-- mycompany
    |               `-- app
    |                   `-- App.java
    `-- test
        `-- java
            `-- com
                `-- mycompany
                    `-- app
                        `-- AppTest.java
-----

  The <<<src/main/java>>> directory contains the project source code, the <<<src/test/java>>> directory contains
  the test source, and the <<<pom.xml>>> file is the project's Project Object Model, or POM.

** The POM

    这个 <<<pom.xml>>> 文件文件是 Maven 中项目配置的核心。
    它是一个单一的配置文件，包含以您想要的方式构建项目所需的大部分（the majority of）信息。
    POM非常庞大（huge），它的复杂性让人望而生畏（daunting），但要有效地使用它，并不需要理解所有的复杂性（intricacies）。
    本项目POM为：

+-----+
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
+-----+

** 我刚才做了什么?

    您执行了 Maven 目标 <archetype:generate>，并向该目标传递了各种参数。
    前缀 <archetype> 是提供目标的 {{{../../plugins/index.html}插件}}。
    如果您熟悉 {{{http://ant.apache.org}Ant}}，可以将其视为类似于任务。
    这个 <archetype:generate> 目标基于 {{{/archetypes/maven-archetype-quickstart/}maven-archetype-quickstart}} 原型创建了一个简单的项目。
    现在可以这样说（Suffice it to say for now that），插件是目标的一个集合，有一个共同的目的。
    例如 jboss-maven-plugin ，其目的是“处理各种jboss项目”。

** 构建项目

-----
mvn package
-----

    命令行将打印出各种操作，并以以下内容结束：

-----
 ...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  2.953 s
[INFO] Finished at: 2019-11-24T13:05:10+01:00
[INFO] ------------------------------------------------------------------------
-----

  Unlike the first command executed (<archetype:generate>) you may notice the second is simply
  a single word - <package>. Rather than a <goal>, this is a <phase>.
  一个阶段是 {{{../introduction/introduction-to-the-lifecycle.html}构建生命周期}} 中的一个步骤，生命周期是一个有序的阶段序列。
  When a phase is given, Maven will execute every phase in the sequence
  up to and including the one defined. For example, if we execute the <compile> phase, the
  phases that actually get executed are:

  [[1]] validate

  [[2]] generate-sources

  [[3]] process-sources

  [[4]] generate-resources

  [[5]] process-resources

  [[6]] compile

  []

    您可以使用以下命令测试新编译和打包的JAR：

-----
java -cp target/my-app-1.0-SNAPSHOT.jar com.mycompany.app.App
-----

    它将打印精华（quintessential）:

-----
Hello World!
-----

* Java 9或更高版本

    默认情况下，您的 Maven 版本可能使用 <<<maven-compiler-plugin>>> 的旧版本，该版本与Java 9或更高版本不兼容。
    要以Java9或更高版本为目标，您至少应该使用 <<<maven-compiler-plugin>>> 的3.6.0版本，
    并将 <<<maven.compiler.release>>> 属性设置为目标的Java版本（例如9、10、11、12等）。

    在下面的示例中，我们已将Maven项目配置为使用 <<<maven-compiler-plugin>>> 的3.8.1版，并以Java 11为目标：

+-----+
    <properties>
        <maven.compiler.release>11</maven.compiler.release>
    </properties>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.1</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
+-----+

    要了解更多关于 <<<javac>>> 的 <<<--release>>> 选项，请参见 {{{https://openjdk.java.net/jeps/247}JEP 247}}。

* 运行 Maven 工具

** Maven 阶段

    虽然不是一个全面的（comprehensive）列表，但这些是最常见的<默认>执行的生命周期阶段。

  * <<validate>>: validate the project is correct and all necessary information is available

  * <<compile>>: compile the source code of the project

  * <<test>>: test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed

  * <<package>>: take the compiled code and package it in its distributable format, such as a JAR.

  * <<integration-test>>: process and deploy the package if necessary into an environment where integration tests can be run

  * <<verify>>: run any checks to verify the package is valid 并且符合质量标准。

  * <<install>>: install the package into the local repository, for use as a dependency in other projects locally

  * <<deploy>>: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.

  []

    除了上面的<默认>列表之外，还有另外两个Maven生命周期值得注意。他们是

  * <<clean>>: cleans up artifacts created by prior builds

  []

  * <<site>>: generates site documentation for this project

  []

    阶段实际上是映射到基本（underlying）目标的。每个阶段执行的具体目标取决于项目的打包类型。
    例如，如果项目类型是 JAR, <package> 就执行 <jar:jar>，如果项目类型是——你猜到了——WAR，则执行 <war:war>。

    值得注意的一件有趣的事情是，阶段和目标可能是按顺序执行的。

-----
mvn clean dependency:copy-dependencies package
-----

    此命令将清理项目、复制依赖项并打包项目（当然，执行 <package> 之前的所有阶段）。

** 生成站点

-----
mvn site
-----

    这个阶段根据项目的pom信息生成一个站点。您可以查看在 <<<target/site>>> 下生成的文档。

* 结尾（Conclusion）

    我们希望这篇简短的概述（quick overview）能激起您对 Maven 的多功能性的兴趣。
    这是一个非常简短的快速入门指南。现在您已经准备好了解有关您刚刚执行的操作的更全面（comprehensive）的细节了。
    查看 {{{./index.html}Maven入门指南}}。